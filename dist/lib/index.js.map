{"version":3,"sources":["../../src/lib/index.js"],"names":["opts","projectDir","tmpDirPath","process","env","VERBOSE","console","log","flowCommandPath","flowCommandTimeout","DEFAULT_FLOW_TIMEOUT","outputDir","path","isAbsolute","resolve","join","globIncludePatterns","globExcludePatterns","concurrentFiles","Array","isArray","Promise","reject","TypeError","length","threshold","coverageData","reportResults","reportTypes","indexOf","push","reportJSON","generate","reportText","reportHTML","then","all","generateFlowCoverageReport"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\n\n// @flow\n\nimport path from \"path\";\n\nimport { DEFAULT_FLOW_TIMEOUT } from \"./cli/config\";\nimport { collectFlowCoverage } from \"./flow\";\nimport { withTmpDir } from \"./promisified\";\nimport reportHTML from \"./report-html\";\nimport reportJSON from \"./report-json\";\nimport reportText from \"./report-text\";\n\n// eslint-disable-next-line no-duplicate-imports\nimport type { ConfigParams, ReportType } from \"./cli/config\";\n// eslint-disable-next-line no-duplicate-imports\nimport type { FlowCoverageSummaryData } from \"./flow\";\n\nexport type FlowCoverageReportType = ReportType;\n\nexport type FlowCoverageReportOptions = {\n  ...ConfigParams,\n  log?: Function\n};\n\n// User Scenarios\n// 1. generate text report from a project dir\n// 2. generate text report from a project dir and save json to file\n// 3. generate text report from a project dir and html report\n// 4. generate text/html report from a saved json file\n// 5. set a custom threshold\n// 6. set a custom output dir\n// 7. usa a saved json file to compute coverage trend (and fail on negative trends)\n\nexport default async function generateFlowCoverageReport(\n  opts: FlowCoverageReportOptions\n) {\n  // Apply defaults to options.\n  const projectDir = opts.projectDir;\n\n  let tmpDirPath: ?string;\n\n  if (process.env.VERBOSE && process.env.VERBOSE === \"DUMP_JSON\") {\n    tmpDirPath = await withTmpDir(\"flow-coverage-report\");\n    console.log(`Verbose DUMP_JSON mode enabled (${tmpDirPath})`);\n  }\n\n  opts.flowCommandPath = opts.flowCommandPath || \"flow\";\n  opts.flowCommandTimeout = opts.flowCommandTimeout || DEFAULT_FLOW_TIMEOUT; // Defaults to 15s\n  opts.outputDir = opts.outputDir || \"./flow-coverage\";\n  opts.outputDir = path.isAbsolute(opts.outputDir)\n    ? opts.outputDir\n    : path.resolve(path.join(projectDir, opts.outputDir));\n  opts.globIncludePatterns = opts.globIncludePatterns || [];\n  opts.globExcludePatterns = opts.globExcludePatterns || [];\n  opts.concurrentFiles = opts.concurrentFiles || 1;\n\n  if (!Array.isArray(opts.globExcludePatterns)) {\n    opts.globExcludePatterns = [opts.globExcludePatterns];\n  }\n\n  // Apply validation checks.\n  if (!projectDir) {\n    return Promise.reject(new TypeError(\"projectDir option is mandatory\"));\n  }\n\n  if (opts.globIncludePatterns.length === 0) {\n    return Promise.reject(new TypeError(\"empty globIncludePatterns option\"));\n  }\n\n  if (!opts.threshold) {\n    return Promise.reject(new TypeError(\"threshold option is mandatory\"));\n  }\n\n  const coverageData: FlowCoverageSummaryData = await collectFlowCoverage(\n    opts,\n    tmpDirPath\n  );\n\n  const reportResults = [];\n  const reportTypes = opts.reportTypes || [\"text\"];\n\n  if (reportTypes.indexOf(\"json\") >= 0) {\n    reportResults.push(reportJSON.generate(coverageData, opts));\n  }\n\n  if (reportTypes.indexOf(\"text\") >= 0) {\n    reportResults.push(reportText.generate(coverageData, opts));\n  }\n\n  // Run the badge reporter implicitly if the html report has been included.\n  if (reportTypes.indexOf(\"badge\") >= 0 || reportTypes.indexOf(\"html\") >= 0) {\n    // reportResults.push(reportBadge.generate(coverageData, opts));\n  }\n\n  if (reportTypes.indexOf(\"html\") >= 0) {\n    reportResults.push(\n      reportHTML.generate(coverageData, opts).then(() => {\n        console.log(\n          `View generated HTML Report at file://${opts.outputDir}/index.html`\n        );\n      })\n    );\n  }\n\n  return Promise.all(reportResults).then(() => {\n    return [coverageData, opts];\n  });\n}\n"]}